{"dependencies":[{"name":"./internal/_clone","loc":{"line":1,"column":19}},{"name":"./internal/_curry3","loc":{"line":2,"column":20}},{"name":"./internal/_isTransformer","loc":{"line":3,"column":27}},{"name":"./internal/_reduce","loc":{"line":4,"column":20}},{"name":"./internal/_stepCat","loc":{"line":5,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _clone2 = require(\"./internal/_clone\");\n\nvar _clone3 = _interopRequireDefault(_clone2);\n\nvar _curry = require(\"./internal/_curry3\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _isTransformer2 = require(\"./internal/_isTransformer\");\n\nvar _isTransformer3 = _interopRequireDefault(_isTransformer2);\n\nvar _reduce2 = require(\"./internal/_reduce\");\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _stepCat2 = require(\"./internal/_stepCat\");\n\nvar _stepCat3 = _interopRequireDefault(_stepCat2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @example\n *\n *      var numbers = [1, 2, 3, 4];\n *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      var intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nvar into = /*#__PURE__*/(0, _curry2.default)(function into(acc, xf, list) {\n  return (0, _isTransformer3.default)(acc) ? (0, _reduce3.default)(xf(acc), acc['@@transducer/init'](), list) : (0, _reduce3.default)(xf((0, _stepCat3.default)(acc)), (0, _clone3.default)(acc, [], [], false), list);\n});\nexports.default = into;"},"hash":"474ba1611ec21c6bbbfdf3556ee1abd0"}