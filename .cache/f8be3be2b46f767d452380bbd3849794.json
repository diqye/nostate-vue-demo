{"dependencies":[{"name":"./internal/_arity","loc":{"line":1,"column":19}},{"name":"./internal/_curry1","loc":{"line":2,"column":20}},{"name":"./map","loc":{"line":3,"column":16}},{"name":"./max","loc":{"line":4,"column":16}},{"name":"./reduce","loc":{"line":5,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _arity2 = require(\"./internal/_arity\");\n\nvar _arity3 = _interopRequireDefault(_arity2);\n\nvar _curry = require(\"./internal/_curry1\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _map = require(\"./map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _max = require(\"./max\");\n\nvar _max2 = _interopRequireDefault(_max);\n\nvar _reduce = require(\"./reduce\");\n\nvar _reduce2 = _interopRequireDefault(_reduce);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @example\n *\n *      var fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0°C')],\n *        [R.equals(100), R.always('water boils at 100°C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0°C'\n *      fn(50); //=> 'nothing special happens at 50°C'\n *      fn(100); //=> 'water boils at 100°C'\n */\nvar cond = /*#__PURE__*/(0, _curry2.default)(function cond(pairs) {\n  var arity = (0, _reduce2.default)(_max2.default, 0, (0, _map2.default)(function (pair) {\n    return pair[0].length;\n  }, pairs));\n  return (0, _arity3.default)(arity, function () {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\nexports.default = cond;"},"hash":"4a1a7e4abfe75891406d70cb1bd3b7d1"}