{"dependencies":[{"name":"./internal/_curry3","loc":{"line":1,"column":20}},{"name":"./equals","loc":{"line":2,"column":19}},{"name":"./path","loc":{"line":3,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require(\"./internal/_curry3\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _equals = require(\"./equals\");\n\nvar _equals2 = _interopRequireDefault(_equals);\n\nvar _path2 = require(\"./path\");\n\nvar _path3 = _interopRequireDefault(_path2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      var user1 = { address: { zipCode: 90210 } };\n *      var user2 = { address: { zipCode: 55555 } };\n *      var user3 = { name: 'Bob' };\n *      var users = [ user1, user2, user3 ];\n *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nvar pathEq = /*#__PURE__*/(0, _curry2.default)(function pathEq(_path, val, obj) {\n  return (0, _equals2.default)((0, _path3.default)(_path, obj), val);\n});\nexports.default = pathEq;"},"hash":"ddd18d695d3b770e5474c8a4baaa392c"}