{"dependencies":[{"name":"./internal/_contains","loc":{"line":1,"column":22}},{"name":"./internal/_curry2","loc":{"line":2,"column":20}},{"name":"./flip","loc":{"line":3,"column":17}},{"name":"./reject","loc":{"line":4,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _contains2 = require(\"./internal/_contains\");\n\nvar _contains3 = _interopRequireDefault(_contains2);\n\nvar _curry = require(\"./internal/_curry2\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _flip = require(\"./flip\");\n\nvar _flip2 = _interopRequireDefault(_flip);\n\nvar _reject = require(\"./reject\");\n\nvar _reject2 = _interopRequireDefault(_reject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nvar without = /*#__PURE__*/(0, _curry3.default)(function (xs, list) {\n  return (0, _reject2.default)((0, _flip2.default)(_contains3.default)(xs), list);\n});\nexports.default = without;"},"hash":"8d6a7ab5f4d40076406fd7980101d5f4"}