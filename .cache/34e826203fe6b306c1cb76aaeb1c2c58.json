{"dependencies":[{"name":"./internal/_arity","loc":{"line":1,"column":19}},{"name":"./internal/_concat","loc":{"line":2,"column":20}},{"name":"./internal/_curry2","loc":{"line":3,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _arity2 = require(\"./internal/_arity\");\n\nvar _arity3 = _interopRequireDefault(_arity2);\n\nvar _concat2 = require(\"./internal/_concat\");\n\nvar _concat3 = _interopRequireDefault(_concat2);\n\nvar _curry = require(\"./internal/_curry2\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n */\nvar tryCatch = /*#__PURE__*/(0, _curry3.default)(function _tryCatch(tryer, catcher) {\n  return (0, _arity3.default)(tryer.length, function () {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, (0, _concat3.default)([e], arguments));\n    }\n  });\n});\nexports.default = tryCatch;"},"hash":"756b6155946bf0b65e1602399bd0b950"}