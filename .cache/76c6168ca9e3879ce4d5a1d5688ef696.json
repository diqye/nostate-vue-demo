{"dependencies":[{"name":"./internal/_curry2","loc":{"line":1,"column":20}},{"name":"./internal/_isFunction","loc":{"line":2,"column":24}},{"name":"./curryN","loc":{"line":3,"column":19}},{"name":"./toString","loc":{"line":4,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require(\"./internal/_curry2\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _isFunction2 = require(\"./internal/_isFunction\");\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _curryN = require(\"./curryN\");\n\nvar _curryN2 = _interopRequireDefault(_curryN);\n\nvar _toString = require(\"./toString\");\n\nvar _toString2 = _interopRequireDefault(_toString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      var sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nvar invoker = /*#__PURE__*/(0, _curry3.default)(function invoker(arity, method) {\n  return (0, _curryN2.default)(arity + 1, function () {\n    var target = arguments[arity];\n    if (target != null && (0, _isFunction3.default)(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError((0, _toString2.default)(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\nexports.default = invoker;"},"hash":"84ab612902e1cb0770d94fe1312a3d5a"}