{"dependencies":[{"name":"./internal/_containsWith","loc":{"line":1,"column":26}},{"name":"./internal/_curry3","loc":{"line":2,"column":20}},{"name":"./internal/_filter","loc":{"line":3,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _containsWith2 = require(\"./internal/_containsWith\");\n\nvar _containsWith3 = _interopRequireDefault(_containsWith2);\n\nvar _curry = require(\"./internal/_curry3\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _filter2 = require(\"./internal/_filter\");\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = /*#__PURE__*/(0, _curry2.default)(function innerJoin(pred, xs, ys) {\n  return (0, _filter3.default)(function (x) {\n    return (0, _containsWith3.default)(pred, x, ys);\n  }, xs);\n});\nexports.default = innerJoin;"},"hash":"7c70e5b4fc6228266182879372fb423d"}