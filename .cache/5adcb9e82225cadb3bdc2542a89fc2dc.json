{"dependencies":[{"name":"./internal/_curry2","loc":{"line":1,"column":20}},{"name":"./internal/_dispatchable","loc":{"line":2,"column":26}},{"name":"./internal/_map","loc":{"line":3,"column":17}},{"name":"./internal/_reduce","loc":{"line":4,"column":20}},{"name":"./internal/_xmap","loc":{"line":5,"column":18}},{"name":"./curryN","loc":{"line":6,"column":19}},{"name":"./keys","loc":{"line":7,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require(\"./internal/_curry2\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _dispatchable2 = require(\"./internal/_dispatchable\");\n\nvar _dispatchable3 = _interopRequireDefault(_dispatchable2);\n\nvar _map2 = require(\"./internal/_map\");\n\nvar _map3 = _interopRequireDefault(_map2);\n\nvar _reduce2 = require(\"./internal/_reduce\");\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _xmap2 = require(\"./internal/_xmap\");\n\nvar _xmap3 = _interopRequireDefault(_xmap2);\n\nvar _curryN = require(\"./curryN\");\n\nvar _curryN2 = _interopRequireDefault(_curryN);\n\nvar _keys = require(\"./keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nvar map = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['fantasy-land/map', 'map'], _xmap3.default, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return (0, _curryN2.default)(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return (0, _reduce3.default)(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, (0, _keys2.default)(functor));\n    default:\n      return (0, _map3.default)(fn, functor);\n  }\n}));\nexports.default = map;"},"hash":"d25e41d47565744e767117e4c99c58be"}