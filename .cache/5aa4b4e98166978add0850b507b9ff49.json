{"dependencies":[{"name":"./internal/_concat","loc":{"line":1,"column":20}},{"name":"./internal/_curry2","loc":{"line":2,"column":20}},{"name":"./compose","loc":{"line":3,"column":20}},{"name":"./uniq","loc":{"line":4,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _concat2 = require(\"./internal/_concat\");\n\nvar _concat3 = _interopRequireDefault(_concat2);\n\nvar _curry = require(\"./internal/_curry2\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _compose = require(\"./compose\");\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _uniq = require(\"./uniq\");\n\nvar _uniq2 = _interopRequireDefault(_uniq);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nvar union = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _compose2.default)(_uniq2.default, _concat3.default));\nexports.default = union;"},"hash":"714a8ebb4e34780a0f8e7bafb4669a94"}