{"dependencies":[{"name":"./internal/_concat","loc":{"line":1,"column":20}},{"name":"./internal/_curry3","loc":{"line":2,"column":20}},{"name":"./uniqWith","loc":{"line":3,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _concat2 = require(\"./internal/_concat\");\n\nvar _concat3 = _interopRequireDefault(_concat2);\n\nvar _curry = require(\"./internal/_curry3\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _uniqWith = require(\"./uniqWith\");\n\nvar _uniqWith2 = _interopRequireDefault(_uniqWith);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      var l1 = [{a: 1}, {a: 2}];\n *      var l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = /*#__PURE__*/(0, _curry2.default)(function unionWith(pred, list1, list2) {\n  return (0, _uniqWith2.default)(pred, (0, _concat3.default)(list1, list2));\n});\nexports.default = unionWith;"},"hash":"dc7a88f16ca1f774eed8012fe0a65271"}