{"dependencies":[{"name":"./internal/_curryN","loc":{"line":1,"column":20}},{"name":"./internal/_dispatchable","loc":{"line":2,"column":26}},{"name":"./internal/_has","loc":{"line":3,"column":17}},{"name":"./internal/_reduce","loc":{"line":4,"column":20}},{"name":"./internal/_xreduceBy","loc":{"line":5,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curryN2 = require(\"./internal/_curryN\");\n\nvar _curryN3 = _interopRequireDefault(_curryN2);\n\nvar _dispatchable2 = require(\"./internal/_dispatchable\");\n\nvar _dispatchable3 = _interopRequireDefault(_dispatchable2);\n\nvar _has2 = require(\"./internal/_has\");\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _reduce2 = require(\"./internal/_reduce\");\n\nvar _reduce3 = _interopRequireDefault(_reduce2);\n\nvar _xreduceBy2 = require(\"./internal/_xreduceBy\");\n\nvar _xreduceBy3 = _interopRequireDefault(_xreduceBy2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce\n * @example\n *\n *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n *      var namesByGrade = reduceToNamesBy(function(student) {\n *        var score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      var students = [{name: 'Lucy', score: 92},\n *                      {name: 'Drew', score: 85},\n *                      // ...\n *                      {name: 'Bart', score: 62}];\n *      namesByGrade(students);\n *      // {\n *      //   'A': ['Lucy'],\n *      //   'B': ['Drew']\n *      //   // ...,\n *      //   'F': ['Bart']\n *      // }\n */\nvar reduceBy = /*#__PURE__*/(0, _curryN3.default)(4, [], /*#__PURE__*/(0, _dispatchable3.default)([], _xreduceBy3.default, function reduceBy(valueFn, valueAcc, keyFn, list) {\n  return (0, _reduce3.default)(function (acc, elt) {\n    var key = keyFn(elt);\n    acc[key] = valueFn((0, _has3.default)(key, acc) ? acc[key] : valueAcc, elt);\n    return acc;\n  }, {}, list);\n}));\nexports.default = reduceBy;"},"hash":"b3924941427b127fe0700147bcf720f5"}