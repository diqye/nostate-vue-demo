{"dependencies":[{"name":"./internal/_contains","loc":{"line":1,"column":22}},{"name":"./internal/_curry2","loc":{"line":2,"column":20}},{"name":"./internal/_filter","loc":{"line":3,"column":20}},{"name":"./flip","loc":{"line":4,"column":17}},{"name":"./uniq","loc":{"line":5,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _contains2 = require(\"./internal/_contains\");\n\nvar _contains3 = _interopRequireDefault(_contains2);\n\nvar _curry = require(\"./internal/_curry2\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _filter2 = require(\"./internal/_filter\");\n\nvar _filter3 = _interopRequireDefault(_filter2);\n\nvar _flip = require(\"./flip\");\n\nvar _flip2 = _interopRequireDefault(_flip);\n\nvar _uniq = require(\"./uniq\");\n\nvar _uniq2 = _interopRequireDefault(_uniq);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nvar intersection = /*#__PURE__*/(0, _curry3.default)(function intersection(list1, list2) {\n  var lookupList, filteredList;\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n  return (0, _uniq2.default)((0, _filter3.default)((0, _flip2.default)(_contains3.default)(lookupList), filteredList));\n});\nexports.default = intersection;"},"hash":"915b2854b5a5f74946daafa8e4ebee42"}