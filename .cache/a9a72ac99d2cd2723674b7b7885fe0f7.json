{"dependencies":[{"name":"./internal/_curry1","loc":{"line":1,"column":20}},{"name":"./apply","loc":{"line":2,"column":18}},{"name":"./curryN","loc":{"line":3,"column":19}},{"name":"./map","loc":{"line":4,"column":16}},{"name":"./max","loc":{"line":5,"column":16}},{"name":"./pluck","loc":{"line":6,"column":18}},{"name":"./reduce","loc":{"line":7,"column":19}},{"name":"./values","loc":{"line":8,"column":19}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require(\"./internal/_curry1\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _apply = require(\"./apply\");\n\nvar _apply2 = _interopRequireDefault(_apply);\n\nvar _curryN = require(\"./curryN\");\n\nvar _curryN2 = _interopRequireDefault(_curryN);\n\nvar _map = require(\"./map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _max = require(\"./max\");\n\nvar _max2 = _interopRequireDefault(_max);\n\nvar _pluck = require(\"./pluck\");\n\nvar _pluck2 = _interopRequireDefault(_pluck);\n\nvar _reduce = require(\"./reduce\");\n\nvar _reduce2 = _interopRequireDefault(_reduce);\n\nvar _values = require(\"./values\");\n\nvar _values2 = _interopRequireDefault(_values);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      var getMetrics = R.applySpec({\n *        sum: R.add,\n *        nested: { mul: R.multiply }\n *      });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nvar applySpec = /*#__PURE__*/(0, _curry2.default)(function applySpec(spec) {\n  spec = (0, _map2.default)(function (v) {\n    return typeof v == 'function' ? v : applySpec(v);\n  }, spec);\n  return (0, _curryN2.default)((0, _reduce2.default)(_max2.default, 0, (0, _pluck2.default)('length', (0, _values2.default)(spec))), function () {\n    var args = arguments;\n    return (0, _map2.default)(function (f) {\n      return (0, _apply2.default)(f, args);\n    }, spec);\n  });\n});\nexports.default = applySpec;"},"hash":"39f063c42931c1dbc3eebabf852f3a41"}