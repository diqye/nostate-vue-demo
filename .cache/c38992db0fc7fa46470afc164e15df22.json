{"dependencies":[{"name":"./internal/_curry1","loc":{"line":1,"column":20}},{"name":"./converge","loc":{"line":2,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require(\"./internal/_curry1\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _converge = require(\"./converge\");\n\nvar _converge2 = _interopRequireDefault(_converge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      var getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nvar juxt = /*#__PURE__*/(0, _curry2.default)(function juxt(fns) {\n  return (0, _converge2.default)(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\nexports.default = juxt;"},"hash":"2b141eff8a72367a04f6093e883c0fa6"}