{"dependencies":[{"name":"./internal/_arity","loc":{"line":1,"column":19}},{"name":"./internal/_pipe","loc":{"line":2,"column":18}},{"name":"./reduce","loc":{"line":3,"column":19}},{"name":"./tail","loc":{"line":4,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pipe;\n\nvar _arity2 = require(\"./internal/_arity\");\n\nvar _arity3 = _interopRequireDefault(_arity2);\n\nvar _pipe2 = require(\"./internal/_pipe\");\n\nvar _pipe3 = _interopRequireDefault(_pipe2);\n\nvar _reduce = require(\"./reduce\");\n\nvar _reduce2 = _interopRequireDefault(_reduce);\n\nvar _tail = require(\"./tail\");\n\nvar _tail2 = _interopRequireDefault(_tail);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return (0, _arity3.default)(arguments[0].length, (0, _reduce2.default)(_pipe3.default, arguments[0], (0, _tail2.default)(arguments)));\n}"},"hash":"100e1ae182275781ca22c9df7797a900"}