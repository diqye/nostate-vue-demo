{"dependencies":[{"name":"./internal/_arity","loc":{"line":1,"column":19}},{"name":"./internal/_curry2","loc":{"line":2,"column":20}},{"name":"./internal/_has","loc":{"line":3,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _arity2 = require(\"./internal/_arity\");\n\nvar _arity3 = _interopRequireDefault(_arity2);\n\nvar _curry = require(\"./internal/_curry2\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _has2 = require(\"./internal/_has\");\n\nvar _has3 = _interopRequireDefault(_has2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an\n * additional function that will be applied to a given argument set and used to\n * create the cache key under which the results of the function to be memoized\n * will be stored. Care must be taken when implementing key generation to avoid\n * clashes that may overwrite previous entries erroneously.\n *\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} fn The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @see R.memoize\n * @example\n *\n *      let count = 0;\n *      const factorial = R.memoizeWith(R.identity, n => {\n *        count += 1;\n *        return R.product(R.range(1, n + 1));\n *      });\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      factorial(5); //=> 120\n *      count; //=> 1\n */\nvar memoizeWith = /*#__PURE__*/(0, _curry3.default)(function memoizeWith(mFn, fn) {\n  var cache = {};\n  return (0, _arity3.default)(fn.length, function () {\n    var key = mFn.apply(this, arguments);\n    if (!(0, _has3.default)(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\nexports.default = memoizeWith;"},"hash":"da1e8fc427b16e9d387abca4df893672"}