{"dependencies":[{"name":"./internal/_curry2","loc":{"line":1,"column":20}},{"name":"./internal/_isArray","loc":{"line":2,"column":21}},{"name":"./internal/_isFunction","loc":{"line":3,"column":24}},{"name":"./internal/_isString","loc":{"line":4,"column":22}},{"name":"./toString","loc":{"line":5,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require(\"./internal/_curry2\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _isArray2 = require(\"./internal/_isArray\");\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _isFunction2 = require(\"./internal/_isFunction\");\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _isString2 = require(\"./internal/_isString\");\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _toString = require(\"./toString\");\n\nvar _toString2 = _interopRequireDefault(_toString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nvar concat = /*#__PURE__*/(0, _curry3.default)(function concat(a, b) {\n  if ((0, _isArray3.default)(a)) {\n    if ((0, _isArray3.default)(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError((0, _toString2.default)(b) + ' is not an array');\n  }\n  if ((0, _isString3.default)(a)) {\n    if ((0, _isString3.default)(b)) {\n      return a + b;\n    }\n    throw new TypeError((0, _toString2.default)(b) + ' is not a string');\n  }\n  if (a != null && (0, _isFunction3.default)(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && (0, _isFunction3.default)(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError((0, _toString2.default)(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\nexports.default = concat;"},"hash":"15f4b193604de28bac162480e89ccee5"}