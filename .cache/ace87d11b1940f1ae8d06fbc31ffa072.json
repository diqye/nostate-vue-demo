{"dependencies":[{"name":"./internal/_curry3","loc":{"line":1,"column":20}},{"name":"./concat","loc":{"line":2,"column":19}},{"name":"./differenceWith","loc":{"line":3,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require(\"./internal/_curry3\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _concat = require(\"./concat\");\n\nvar _concat2 = _interopRequireDefault(_concat);\n\nvar _differenceWith = require(\"./differenceWith\");\n\nvar _differenceWith2 = _interopRequireDefault(_differenceWith);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      var eqA = R.eqBy(R.prop('a'));\n *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nvar symmetricDifferenceWith = /*#__PURE__*/(0, _curry2.default)(function symmetricDifferenceWith(pred, list1, list2) {\n  return (0, _concat2.default)((0, _differenceWith2.default)(pred, list1, list2), (0, _differenceWith2.default)(pred, list2, list1));\n});\nexports.default = symmetricDifferenceWith;"},"hash":"139fe9cd0b945c035a57938962bb2110"}