{"dependencies":[{"name":"./internal/_curry3","loc":{"line":1,"column":20}},{"name":"./mergeWithKey","loc":{"line":2,"column":25}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _curry = require(\"./internal/_curry3\");\n\nvar _curry2 = _interopRequireDefault(_curry);\n\nvar _mergeWithKey = require(\"./mergeWithKey\");\n\nvar _mergeWithKey2 = _interopRequireDefault(_mergeWithKey);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nvar mergeWith = /*#__PURE__*/(0, _curry2.default)(function mergeWith(fn, l, r) {\n  return (0, _mergeWithKey2.default)(function (_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\nexports.default = mergeWith;"},"hash":"827086a19548ca938cf18320d6773ab4"}