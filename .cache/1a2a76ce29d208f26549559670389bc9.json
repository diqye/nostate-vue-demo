{"dependencies":[{"name":"./_arrayFromIterator","loc":{"line":1,"column":31}},{"name":"./_containsWith","loc":{"line":2,"column":26}},{"name":"./_functionName","loc":{"line":3,"column":26}},{"name":"./_has","loc":{"line":4,"column":17}},{"name":"../identical","loc":{"line":5,"column":22}},{"name":"../keys","loc":{"line":6,"column":17}},{"name":"../type","loc":{"line":7,"column":17}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _equals;\n\nvar _arrayFromIterator2 = require(\"./_arrayFromIterator\");\n\nvar _arrayFromIterator3 = _interopRequireDefault(_arrayFromIterator2);\n\nvar _containsWith2 = require(\"./_containsWith\");\n\nvar _containsWith3 = _interopRequireDefault(_containsWith2);\n\nvar _functionName2 = require(\"./_functionName\");\n\nvar _functionName3 = _interopRequireDefault(_functionName2);\n\nvar _has2 = require(\"./_has\");\n\nvar _has3 = _interopRequireDefault(_has2);\n\nvar _identical = require(\"../identical\");\n\nvar _identical2 = _interopRequireDefault(_identical);\n\nvar _keys = require(\"../keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _type = require(\"../type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparision of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = (0, _arrayFromIterator3.default)(aIterator);\n  var b = (0, _arrayFromIterator3.default)(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  }\n\n  // if *a* array contains any element that is not included in *b*\n  return !(0, _containsWith3.default)(function (b, aItem) {\n    return !(0, _containsWith3.default)(eq, aItem, b);\n  }, b, a);\n}\n\nfunction _equals(a, b, stackA, stackB) {\n  if ((0, _identical2.default)(a, b)) {\n    return true;\n  }\n\n  var typeA = (0, _type2.default)(a);\n\n  if (typeA !== (0, _type2.default)(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' && (0, _functionName3.default)(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && (0, _identical2.default)(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!(0, _identical2.default)(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = (0, _keys2.default)(a);\n  if (keysA.length !== (0, _keys2.default)(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!((0, _has3.default)(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  return true;\n}"},"hash":"61a778f2da537b4ff02323540db2dabf"}