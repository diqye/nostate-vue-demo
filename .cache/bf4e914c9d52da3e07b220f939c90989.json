{"dependencies":[{"name":"./internal/_arity","loc":{"line":1,"column":19}},{"name":"./internal/_curry1","loc":{"line":2,"column":20}},{"name":"./internal/_curry2","loc":{"line":3,"column":20}},{"name":"./internal/_curryN","loc":{"line":4,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _arity2 = require(\"./internal/_arity\");\n\nvar _arity3 = _interopRequireDefault(_arity2);\n\nvar _curry = require(\"./internal/_curry1\");\n\nvar _curry3 = _interopRequireDefault(_curry);\n\nvar _curry4 = require(\"./internal/_curry2\");\n\nvar _curry5 = _interopRequireDefault(_curry4);\n\nvar _curryN2 = require(\"./internal/_curryN\");\n\nvar _curryN3 = _interopRequireDefault(_curryN2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/(0, _curry5.default)(function curryN(length, fn) {\n  if (length === 1) {\n    return (0, _curry3.default)(fn);\n  }\n  return (0, _arity3.default)(length, (0, _curryN3.default)(length, [], fn));\n});\nexports.default = curryN;"},"hash":"ab9d4737b255f2fc4adec1c437dd0d29"}